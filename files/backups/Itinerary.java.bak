import java.util.LinkedList;
import java.util.ListIterator;

class Itinerary extends UserInput
{
	private LinkedList<Leg> legs;
	
	public LinkedList<Leg> getLegs() {return legs;}
	
	private Itinerary(LinkedList<Leg> legs)
	{
		this.legs = legs;
	}
	
	public static Itinerary createRoute(LinkedList<Waypoint> waypoints, Sea sea) throws CSVItineraryException
	{
		LinkedList<Leg> potentialLegs;
		ListIterator<Waypoint> li;
		Waypoint origin;
		Waypoint previous;
		Waypoint next;
		Leg leg;
		int remainingWaypoints = waypoints.size();
		
		if(remainingWaypoints >= 2){
			potentialLegs = new LinkedList<Leg>();
			li = waypoints.listIterator();
			previous = li.next();
			remainingWaypoints--;
			//check that the route's origin is in water
			origin = previous;
			if(!(pointIsOnWater(origin, sea))) throw new LandCollisionException("A marine route cannot begin on land.");
			while(remainingWaypoints > 0){
				next = li.next();
				leg = new Leg(previous, next);
				/*if(AppConfiguration.DEBUG){
					System.out.println("Leg created:");
					System.out.println(s.print());
				}*/
				if(legIsOnWater(leg, sea)){
					potentialLegs.add(leg);
				}else{
					throw new LandCollisionException(leg.toString() + " runs aground.");
				}
				previous = next;
				remainingWaypoints--;
			}
			return new Itinerary(potentialLegs);
		}else {
			throw new LessThan2WaypointsException("Route has only " + remainingWaypoints + " waypoints, while a valid route has at least an origin and a destination.");
		}
	}
	
	private static boolean legIsOnWater(Leg leg, Sea sea)
	{
		if(sea.islandCount() <= 0) return true;
		System.out.println("in legIsInWater(Leg leg, Sea sea)");////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// get leg's extremes
		Coordinates ne = leg.getNorthEnd();
		Coordinates se = leg.getSouthEnd();
		Coordinates we = leg.getWestEnd();
		Coordinates ee = leg.getEastEnd();
		double legMinX = we.getLongitude();
		double legMaxX = ee.getLongitude();
		double legMinY = se.getLatitude();
		double legMaxY = ne.getLatitude();
		
		// get sea's extremes
		Coordinates sne = sea.getNorthEnd();
		Coordinates sse = sea.getSouthEnd();
		Coordinates swe = sea.getWestEnd();
		Coordinates see = sea.getEastEnd();
		double seaMinX = swe.getLongitude();
		double seaMaxX = see.getLongitude();
		double seaMinY = sse.getLatitude();
		double seaMaxY = sne.getLatitude();
		
		if(!((legMaxX < seaMinX) || (legMinX > seaMaxX) || (legMaxY < seaMinY) || (legMinY > seaMaxY))){
			LinkedList<Island> islands = sea.getIslands();
			for(Island island : islands){
				// get island's extemes
				Coordinates cn = island.getCapeNorth();
				Coordinates cs = island.getCapeSouth();
				Coordinates cw = island.getCapeWest();
				Coordinates ce = island.getCapeEast();
				double isleMinX = cw.getLongitude();
				double isleMaxX = ce.getLongitude();
				double isleMinY = cs.getLatitude();
				double isleMaxY = cn.getLatitude();
	
				if(!((legMaxX < isleMinX) || (legMinX > isleMaxX) || (legMaxY < isleMinY) || (legMinY > isleMaxY))){
					LinkedList<Shore> shores = island.getShores();
					for(Shore shore : shores){
						if(leg.getIntersectionWith(shore).intersecting()) return false;
					}
				}
			}
		}
		return true;
	}
	
	private static boolean pointIsOnWater(Coordinates point, Sea sea)
	{
		if(sea.islandCount() <= 0) return true;
		
		// get sea's extremes
		Coordinates sne = sea.getNorthEnd();
		Coordinates sse = sea.getSouthEnd();
		Coordinates swe = sea.getWestEnd();
		Coordinates see = sea.getEastEnd();
		double seaMinX = swe.getLongitude();
		double seaMaxX = see.getLongitude();
		double seaMinY = sse.getLatitude();
		double seaMaxY = sne.getLatitude();
		
		double x = point.getLongitude();
		double y = point.getLatitude();
		
		if((x < seaMinX) || (x > seaMaxX) || (y < seaMinY) || (y > seaMaxY)){
			return true;
		} else{
			LinkedList<Island> islands = sea.getIslands();
			for(Island island : islands){
				// get island's extemes
				Coordinates cn = island.getCapeNorth();
				Coordinates cs = island.getCapeSouth();
				Coordinates cw = island.getCapeWest();
				Coordinates ce = island.getCapeEast();
				double isleMinX = cw.getLongitude();
				double isleMaxX = ce.getLongitude();
				double isleMinY = cs.getLatitude();
				double isleMaxY = cn.getLatitude();
				
				if((x < isleMinX) || (x > isleMaxX) || (y < isleMinY) || (y > isleMaxY)) continue;
				if(island.contains(point)) return false;
			}
		}
		return true;
	}
}